from sklearn.cross_validation import cross_val_score, ShuffleSplit
from sklearn.datasets import load_boston
from sklearn.ensemble import RandomForestRegressor
import numpy as np
import pandas as pd

Y = pd.read_csv("Target.csv")
X = pd.read_csv("STD.csv")
names=X.columns


# Load boston housing dataset as an example
# boston = load_boston()
# X = boston["data"]
# Y = boston["target"]
# names = boston["feature_names"]

rf = RandomForestRegressor(n_estimators=20, max_depth=4)
scores = []
# 单独采用每个特征进行建模，并进行交叉验证
for i in range(X.shape[1]):
    score = cross_val_score(rf, X.iloc[:, i:i+1], Y, scoring="r2",  # 注意X[:, i]和X[:, i:i+1]的区别
                            cv=ShuffleSplit(len(X), 3, .3))
    scores.append((format(np.mean(score), '.3f'), names[i]))
print(sorted(scores, reverse=True))

# result:
#[('0.114', 'V50'), ('0.112', 'V19'), ('0.108', 'V31'), ('0.105', 'V85'), ('0.105', 'V25'), ('0.099', 'V98'), ('0.095', 'V76'), ('0.094', 'V92'), ('0.092', 'V13'), ('0.090', 'V106'), ('0.089', 'V37'), ('0.089', 'V128'), ('0.089', 'V10'), ('0.088', 'V16'), ('0.086', 'V4'), ('0.085', 'V112'), ('0.084', 'V34'), ('0.083', 'V103'), ('0.081', 'V7'), ('0.079', 'V79'), ('0.078', 'V82'), ('0.078', 'V64'), ('0.077', 'V88'), ('0.077', 'V56'), ('0.077', 'V28'), ('0.076', 'V40'), ('0.073', 'V125'), ('0.073', 'V109'), ('0.073', 'V101'), ('0.072', 'V100'), ('0.071', 'V58'), ('0.069', 'V46'), ('0.066', 'V74'), ('0.063', 'V43'), ('0.061', 'V94'), ('0.057', 'V122'), ('0.056', 'V53'), ('0.055', 'V71'), ('0.054', 'V61'), ('0.053', 'V91'), ('0.053', 'V52'), ('0.053', 'V22'), ('0.053', 'V115'), ('0.052', 'V47'), ('0.051', 'V55'), ('0.051', 'V45'), ('0.050', 'V95'), ('0.048', 'V68'), ('0.048', 'V62'), ('0.048', 'V124'), ('0.046', 'V44'), ('0.045', 'V97'), ('0.045', 'V73'), ('0.044', 'V99'), ('0.044', 'V42'), ('0.044', 'V41'), ('0.044', 'V127'), ('0.042', 'V89'), ('0.042', 'V87'), ('0.042', 'V49'), ('0.041', 'V72'), ('0.041', 'V123'), ('0.040', 'V70'), ('0.040', 'V126'), ('0.039', 'V96'), ('0.039', 'V39'), ('0.039', 'V120'), ('0.038', 'V66'), ('0.037', 'V121'), ('0.037', 'V119'), ('0.035', 'V69'), ('0.034', 'V93'), ('0.034', 'V90'), ('0.034', 'V51'), ('0.033', 'V67'), ('0.031', 'V48'), ('0.030', 'V118'), ('0.029', 'V65'), ('0.029', 'V116'), ('0.024', 'V23'), ('0.022', 'V38'), ('0.021', 'V59'), ('0.021', 'V5'), ('0.020', 'V26'), ('0.019', 'V80'), ('0.018', 'V29'), ('0.017', 'V83'), ('0.017', 'V8'), ('0.017', 'V17'), ('0.015', 'V57'), ('0.015', 'V35'), ('0.015', 'V32'), ('0.014', 'V77'), ('0.013', 'V110'), ('0.012', 'V86'), ('0.012', 'V107'), ('0.011', 'V104'), ('0.010', 'V113'), ('0.008', 'V33'), ('0.008', 'V20'), ('0.006', 'V63'), ('0.006', 'V60'), ('0.006', 'V54'), ('0.006', 'V114'), ('0.005', 'V117'), ('0.004', 'V14'), ('0.004', 'V111'), ('0.003', 'V84'), ('0.002', 'V81'), ('0.002', 'V78'), ('0.002', 'V18'), ('0.002', 'V12'), ('0.002', 'V11'), ('0.001', 'V9'), ('0.001', 'V75'), ('0.001', 'V6'), ('0.001', 'V30'), ('0.001', 'V102'), ('0.000', 'V3'), ('0.000', 'V27'), ('0.000', 'V24'), ('0.000', 'V105'), ('-0.004', 'V108'), ('-0.001', 'V15'), ('-0.000', 'V36'), ('-0.000', 'V21')]
